 =====   Variables definition   =====
!--------------------------------------------------------------------------
! Equ file "mmm95" is based on the MMM95 transport model
!--------------------------------------------------------------------------
!==================== Grad-Shafranov equation =============================
!NEQUIL=42;				! 3-moment equilibrium solver
!====================  Ion densities ========================================
 AIM1=9.d0
 AIM2=4.d1
 AIM3=1.2d1
!====================  Impurity radiation ==================================
!   Contribution to Z_eff:
!   Radiation power:
!PZRAD(18,NIZ2,PBOL2):;		! Alternatively, Saveliev's implementation
!PZRAD(6, NIZ3,PBOL3):;		!  for the impurity radiation can be used
!PZRAD(5, NIZ1,PBOL1):;		! Here B stands for Be
! CAR5 - Bremsstrahlung excluding the three specified impurities
! CAR5=PBRAD-5.06E-5*NE*NE*sqrt(TE)*(ZEF1+ZEF2+ZEF3)	
!----------------------------------------------------------------------------
!==================== Auxiliary heating =====================================
! JET adjustment:
!NBI:0.01;	CNB1=16;	! NBI heating routine; CNB1 - number of beams
!----------------------------------------------------------------------------
!==================== Wall neutrals =========================================
 NNCX=5.d1
! SETNAV provides neutral influx (NNCL) needed to maintain the average
! particle density at the level 10. (1st subroutine parameter).
! The rate is limited by the 2nd parameter: d<n_e>/dt ~= CF9
!SETNAV(1.d1,CF9):0.001;			! Flux (parameter NNCL) adjustment
!----------------------------------------------------------------------------
!==================== MMM95 transport model =================================
! mmm42 returns K_e & K_i due to Weiland, res. and kin. bal. modes
!    The output is:
!  Interface  | Internal  |  Description of a quantity
!  array name |   name    |
!----------------------------------------------------------------------------
!  work(j,20) = thiig(jz) = ion thermal diffusivity from the Weiland model
!  work(j,21) = thdig(jz) = hydrogenic ion diffusivity from the Weiland model
!  work(j,22) = theig(jz) = electron thermal diffusivity from the Weiland model
!
!  work(j,24) = thirb(jz) = ion thermal diffusivity from RB modes
!  work(j,25) = thdrb(jz) = hydrogenic ion diffusivity from RB modes
!  work(j,26) = therb(jz) = electron thermal diffusivity from RB modes
!
!  work(j,16) = thikb(jz) = ion thermal diffusivity from KB modes
!  work(j,17) = thdkb(jz) = hydrogenic ion diffusivity from KB modes
!  work(j,18) = thekb(jz) = electron thermal diffusivity from KB modes
!----------------------------------------------------------------------------
!   CAR19 - ion diffusivity, m^2/s (can be negative)
!   CAR22 - growth rate ( 1/sec )
!   CAR23 - electron thermal diffusivity, m^2/s
!   CAR24 - ion thermal diffusivity, m^2/s
!
!-------------------------------------------------------------------------
!CAR16=FTAV(CAR19,CV2);			! Time smoothing
!CAR13=FTAV(CAR23,CV2);			!       -"-
!CAR14=FTAV(CAR24,CV2);			!       -"-
!-------------------------------------------------------------------------
!CAR15=xstep(0.92)*SQZ;		! Optionally, a squeezing factor due to
!CV15=frmax(CAR15);		!    Shaing-Hazeltine can be included
!----------------------------------------------------------------------------
!====================  Particle transport ===================================
!NEB=CF6;			! Boundary condition (default 0.6x10^19)
!----------------------------------------------------------------------------
!====================  Heat transport equations ===========================
!----------------------------------------------------------------------------
!====================  Poloidal field equation ==============================
!HC=HCKIM;	DC=DCKIM;	XC=XCKIM;	! Bootstrap due to Kim
!UEXT=.1; LEXT=10.;
!----------------------------------------------------------------------------
!====================  Time step control  =================================
!----------------------------------------------------------------------------
!====================  Sawtooth oscillations ================================
!CF10 output mode, (use 0. to suppress output). CF11=0.2 s given_period
!----------------------------------------------------------------------------
!====================  Auxiliary quantities =================================
 CV7=8.d-4*VINT(PBLON)(a)
 CV6=1.6d-3*VINT(PBPER)(a)
 CV8=QDT(a)
 CV9=TIMDER(CV8)
 CV10=NEAV(a)
 CV11=TIMDER(CV10)
! Total power minus radiation
 CF16=QDTF(a)+QJOUL(a)+QBTOT(a)+QEX(a)+QIX(a)-QRAD(a)+6.67d-1*QRADX(a)
 CV4=THQ99(r)/MAX(1.d-1,CF16)**6.9d-1
 CV14=VINT(PEBM)(a)+VINT(PIBM)(a)+QEX(a)+QIX(a)
!----------------------------------------------------------------------------
!====================  Radial electric field (not used) =====================
!----------------------------------------------------------------------------
!Ipl_IPL;	Pbrs_QBRADB;		INB_IBMB;	PrBe_vint(PBOL1B);
!Ulc_UPLB;	Psyn_CRAD2*QSYNCB	;IBS_IBSB;	PAr_vint(PBOL2B);
!===================== Profile output =====================================
!ErVd\BTOR*VDIA\-5;      ErVp\-VPOL*BTOR\-5;    \;   w/g\ROTSH/CAR22\1;
!Er\ER\-5;
 SBR No.           2  will be called from detvar.tmp
 AMAIN(r)=AMJ
 ZMAIN(r)=ZMJ
 NIZ1(r)=CIMP1*NE(r)
 ZIM1(r)=ZIBE(r)
 NIZ2(r)=CIMP2*NE(r)
 ZIM2(r)=ZIAR(r)
 NIZ3(r)=CIMP3*NE(r)
 ZIM3(r)=ZICAR(r)
 NDEUT(r)=NE(r)-ZIM1(r)*NIZ1(r)-ZIM2(r)*NIZ2(r)-ZIM3(r)*NIZ3(r)
 NI(r)=NDEUT(r)+NIZ1(r)+NIZ2(r)+NIZ3(r)
 ZEF1(r)=ZIBE(r)*(ZIBE(r)-1.d0)*NIZ1(r)/NE(r)
 ZEF2(r)=ZIAR(r)*(ZIAR(r)-1.d0)*NIZ2(r)/NE(r)
 ZEF3(r)=ZICAR(r)*(ZICAR(r)-1.d0)*NIZ3(r)/NE(r)
 ZEF(r)=ZZEF(r)
 PBOL1(r)=PRBER(r)*NIZ1(r)*NE(r)-PBR1(r)
 PBOL2(r)=PRARG(r)*NIZ2(r)*NE(r)-PBR2(r)
 PBOL3(r)=PRCAR(r)*NIZ3(r)*NE(r)-PBR3(r)
 PRAD(r)=PBOL1(r)+PBOL2(r)+PBOL3(r)+PBRAD(r)+CRAD2*PSYNC(r)
 CAR19(r)=WORK(J,21)+WORK(J,25)+WORK(J,17)
 CAR22(r)=WORK(J,28)
 CAR23(r)=WORK(J,22)+WORK(J,26)+WORK(J,18)
 CAR24(r)=WORK(J,20)+WORK(J,24)+WORK(J,16)
 CAR16(r)=MIN(5.d0,CAR19(r))
 CAR13(r)=MIN(5.d0,CAR23(r))
 CAR14(r)=MIN(5.d0,CAR24(r))
 PEICR(r)=(CF1+QICR)*GAUSS(0.d0,3.d-1)(r)
 PEX(r)=CAR6X(r)+PEICR(r)+PEBM(r)
 PIX(r)=CAR7X(r)+PIBM(r)
 CAR14X(r)=SNN(r)*NE(r)
 CAR9(r)=PEDT1(r)+PIDT1(r)
 VTOR(r)=VTORX(r)
 VPOL(r)=VPSWW(r)
 ER(r)=BTOR*(VDIA(r)-VPOL(r)+VTOR(r)*MU(r)*FRS(r)/RTOR)
 =====   Initial distributions   =====
 TE(r)=TEX(r)
 TI(r)=TIX(r)
 NE(r)=NEX(r)
 CU(r)=FPR(r)
 F0(r)=1
 F1(r)=1
 F2(r)=1
 F3(r)=1
 F4(r)=1
 F5(r)=1
 F6(r)=1
 F7(r)=1
 F8(r)=1
 F9(r)=1
 Start-up with a prescribed CU distribution
 =====   Equations & subroutines  =====
 ---->  Subroutine  1: NEUT
        is called at -Infty<TIME<+Infty with dt=Each_T
 ---->  Subroutine  2: MMM4A
        is called at -Infty<TIME<+Infty with dt=Each_T
 ---->  NE  is assigned
 DN(r)=CAR16(r)+HNGSE(r)
 CN(r)=WORK(J,67)-VP(r)*VRHH(r)
 CN(r)=MAX(-RHO(r),CN(r))
 NE(r)=NEX(r)
 SN(r)=SNEBM(r)
 SNN(r)=SNNEU(r)
 ---->  Equation for TE  with heat convective flux multipied by GN2E
 HE(r)=CAR13(r)+HNGSE(r)+MIN(CHE2*HABOM(r),CHE1*HAMM(r))
 PE(r)=PEX(r)+POH(r)-PEICL(r)+PEDT(r)-PENEU(r)-PRAD(r)
 GN2E=CF2
 TE(a_b)=TEX(a)
 TE(r)=TEX(r)
 ---->  Equation for TI  with heat convective flux multipied by GN2I
 XI(r)=CAR14(r)+HNASC(r)
 PI(r)=PIX(r)+PEICL(r)+PIDT(r)+CNEUT2*PIONZ(r)-CNEUT3*PICX(r)
 GN2I=CF2
 TI(a_b)=TIX(a)
 TI(r)=TIX(r)
 ---->  Equation for CU 
 HC(r)=HCSA(r)
 DC(r)=DCSA(r)
 XC(r)=XCSA(r)
 CC(r)=CNHR(r)
 CD(r)=CUBM(r)
 MU(r)=MUX(r)
 CU(r)=FPR(r)
 ---->  Subroutine  3: TSCTRL(CAR23,CAR23,CAR24,CF3)
        is called at -Infty<TIME<+Infty with dt=Each_T
 ---->  Subroutine  4: MIXINT(CF10,CF11)
        is called at -Infty<TIME<+Infty with dt=Each_T      Key call:X     
 =====   Radial profiles output   =====
  #  Scale  Name  Output expression
  1  -1     n_e   NE(r)
  2         Zeff  ZEF(r)
  3  5      D_e   DN(r)
  4  2.5    K_e   HE(r)
  5  3      T_e   TE(r)
  6         Pext  PEICR(r)+CAR6X(r)
  7  1.e5   gA    GAITG(r)
  8  2.5    K_i   XI(r)
  9  -1     n_d   NDEUT(r)
 10         RLTi  RTOR/LTI(r)
 11  5      D_ef  CAR19(r)
 12  2.5    K_es  CAR23(r)
 13  3      T_i   TI(r)
 14         PIxt  PIX(r)+CAR7X(r)
 15  1.e5   gamm  CAR22(r)
 16  2.5    K_is  CAR24(r)
 17  -4     j     CU(r)
 18         jZ    CU(r)*4.d-1*GP*RTOR/(RTOR+SHIF(0))/IPOL(r)/G33(r)
 19         wExB  ROTSH(r)
 20  .5     Vtor  UPL(r)
 21  -4     jNB   CUBM(r)
 22         p     PREST(r)
 23  2.     shat  SHEAR(r)
 24  1      mu    MU(r)
 25  -4     joh   CUOHM(r)
 26         sigm  CC(r)
 27         G22   G22(r)
 28  .5     V||   ULON(r)
 29  -4     jBS   CUBS(r)
 30         p_i   PRESI(r)
 31         betj  BETAJ(r)
 32  5      q     1.d0/MU(r)
 33  -24    V_an  WORK(J,67)
 34  -25    Gv    WORK(J,67)*NE(r)
 35         Gd    -DN(r)*GRAD(NE)(r)
 36         Gv    -CN(r)*NE(r)
 37  -3     T_n   TN(r)
 38         tauE  TAUE(r)
 39  -26    Q_HE  -HE(r)*NE(r)*GRAD(TE)(r)
 40  -26    Q_XI  -XI(r)*NI(r)*GRAD(TI)(r)
 41  -24    V_nc  -VP(r)*VRHH(r)
 42  -25    Gd    -DN(r)*GRAD(NE)(r)
 43         Se    SNTOT(r)
 44         SeNB  (1.d0-CV16)*SNEBM(r)
 45  -3     T_i   TI(r)
 46         taEi  TAUEI(r)
 47         tpf   TPF(r)
 48         Qcx   QICX(r)
 49         dzBe  ZEF1(r)
 50         RLTi  RTOR/LTI(r)
 51         grVt  GRAD(VTORX)(r)
 52  1      nuis  NUIS(r)
 53         dzAr  ZEF2(r)
 54         RLNe  RTOR/LNE(r)
 55  3e4    Gflx  QN(r)
 56               0.d0
 57         nBe   NIZ1(r)
 58         RLTe  RTOR/LTE(r)
 59         NN    NN(r)
 60  1      nues  NUES(r)
 61         nAr   NIZ2(r)
 62         SNNn  CAR14X(r)
 63  3e4    Gsrc  QNTOT(r)
 64               0.d0
 65  100    QeFl  QE(r)
 66         QiN   QINEU(r)
 67         QNBI  VINT(PBEAM)(r)
 68         Qei   QEICL(r)
 69  100    QiFl  QI(r)
 70               0.d0
 71         Qeax  VINT(CAR6X)(r)+QEX(r)
 72         QDT1  VINT(CAR9)(r)
 73  100    QeSr  QETOT(r)
 74         QeN   QENEU(r)
 75         QOH   QOH(r)
 76         Qrad  QRAD(r)
 77  100    QiSr  QITOT(r)
 78         Qicx  QICX(r)
 79         Qiax  VINT(CAR7X)(r)+QIX(r)
 80         QDT   QDT(r)
 81         QEdt  QEDWT(r)
 82         Pcx   CNEUT3*PICX(r)
 83         Pedt  PEDT(r)
 84         Pi    PITOT(r)
 85         PDT1  CAR9(r)
 86         PiN   PINEU(r)
 87         Pe    PETOT(r)
 88               0.d0
 89         QIdt  QIDWT(r)
 90         Pion  CNEUT2*PIONZ(r)
 91         Pidt  PIDT(r)
 92         Pei   PEICL(r)
 93         PDT   PEDT(r)+PIDT(r)
 94         PeN   PENEU(r)
 95         Prad  PRAD(r)
 96               0.d0
 =====   Time dependent values output   =====
  #  Scale  Name  Output expression
  1         PICR  QICR
  2         Ipl   IPL
  3         PNBI  QBEAM
  4         INB   IBM(a)
  5  .2     Uplb  UPL(a)
  6         Psi-  FP(NA)
  7  .2     Upl-  UPL(NA)
  8         Psib  FP(a)
  9  100    Palf  CV8
 10         Paux  QNBI+QEX(a)+QIX(a)
 11  20     Q     5.d0*CV8/(QNBI+CV14)
 12         <ne>  CV10
 13  1      dndt  CV11
 14         Tped  TEX(a)
 15  10     dQdt  CV9
 16         NNCL  NNCL
 17         PeDT  QEDT(a)
 18         PiDT  QIDT(a)
 19         Peau  VINT(PEBM)(a)
 20         Piau  VINT(PIBM)(a)
 21         Pei   QEICL(a)
 22         POH   QOH(a)
 23         Prad  QRAD(a)
 24         Ptot  QTOT(AMETR(NA1I))
 25         PeN   QENEU(a)
 26         Pi    QITOT(a)
 27         Pion  CNEUT2*QINEU(a)
 28         Qea   QE(NA1E-1)
 29         PCX   QICX(a)
 30         Pe    QETOT(a)
 31         Paux  CV14
 32         Qia   QI(NA1I-1)
 33         Te0   TE(0)
 34         H89   TAUE(a)/TITER(r)
 35         Ti0   TI(0)
 36         Wequ  WTOT(a)+7.5d-1*CV6+1.5d0*CV7
 37         <Te>  TEAV(a)
 38         H98y  (WI(a)+WE(a))/QTOT(a)/CV4
 39         <Ti>  TIAV(a)
 40         Wtot  WTOT(a)+CV7+CV6
 41         ne0   NE(0)
 42         Gout  QN(a)
 43  1      dndt  CV11
 44         taus  CV4
 45         nped  NE(a)
 46         Gint  QNTOT(a)
 47         taup  TAUP(a)
 48         tauE  TAUE(a)
 49         V     VOLUME
 50         SeNN  VINT(CAR14X)(a)
 51         Zef0  ZEF(0)
 52         betr  BETT(a)*ABC*BTOR/IPL
 53         ni0   NI(0)
 54         SeNB  VINT(SNEBM)(a)
 55         nepd  NEX(a)
 56         betp  BETAJ(a)
 57         li    LINT(a)
 58         <Px>  CV12
 59         shth  QNBI-QBTOT(a)
 60         NNCX  NNCX
 61         Qext  QEX(a)
 62         GNN   4.37d5*SLAT(a)*(NNCL*SQRT(ENCL)+NNWM*SQRT(ENWM))
 63         Qixt  QIX(a)
